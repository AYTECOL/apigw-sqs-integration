AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  api-gw-sqs
  Sample SAM Template for api-gw-sqs
Globals:
  Function:
    Timeout: 30
    Tracing: Active
  Api:
    TracingEnabled: true
Resources:
  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: api-gw-sqs-dlq
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: api-gw-sqs-queue
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - DeadLetterQueue
            - Arn
        maxReceiveCount: 1
  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Action: SQS:*
            Effect: Allow
            Principal: '*'
            Resource: !GetAtt Queue.Arn
        Version: '2012-10-17'
      Queues:
        - !Ref Queue
  ApiGatewayToSqsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      RoleName: ApiGatewayToSqsRole
      Policies:
        - PolicyName: ApiGatewayLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: sqs:SendMessage
                Effect: Allow
                Resource: !GetAtt Queue.Arn
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Effect: Allow
                Resource: "*"
  SqsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/api-sqs/
      Handler: app.handler
      Runtime: nodejs16.x
      Architectures:
      - x86_64
      Events:
        ApiGwSQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 1
  ApiGwSQS:
    Type: AWS::SQS::Queue
  ApiGw:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: "API Gateway to SQS"
      Description: "Sample API for sending messages via API Gateway directly to SQS"
  ProxyResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGw
      ParentId: !GetAtt
        - ApiGw
        - RootResourceId
      PathPart: '{proxy+}'
  OptionsMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGw
      ResourceId: !Ref ProxyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
  ProxyResourceANY:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGw
      ResourceId: !Ref ProxyResource
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Credentials: !GetAtt ApiGatewayToSqsRole.Arn
        IntegrationHttpMethod: ANY
        Type: AWS
        Uri: !Join
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref AWS::Region
            - ':sqs:path/'
            - !Ref AWS::AccountId
            - '/'
            - !GetAtt Queue.QueueName
        RequestParameters:
          integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
        RequestTemplates:
          "application/json": "Action=SendMessage&MessageBody=$input.body"
        IntegrationResponses:
          - StatusCode: "200"
            ResponseTemplates:
              application/json: '{"message": "request sent"}'
  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name:
        Fn::Sub: ApplicationInsights-SAM-${AWS::StackName}
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0
  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName:
        Ref: ApplicationResourceGroup
      AutoConfigurationEnabled: 'true'
Outputs:
  # SqsApi:
  #   Description: API Gateway endpoint URL for Prod stage for Hello World function
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
  SqsFunction:
    Description: Hello World Lambda Function ARN
    Value: !GetAtt SqsFunction.Arn
  # SqsFunctionIamRole:
  #   Description: Implicit IAM Role created for Hello World function
  #   Value: !GetAtt SqsFunctionIamRole.Arn
